@host = localhost
@port = 3000
@uriBase = http://{{host}}:{{port}}
@uri = {{uriBase}}
@contentType = application/json

@userLoginUsername = admin
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149
@authToken = {{authLogIn.response.body.$.accessToken}}

// Note when we use authRefreshToken, we must assign @authToken manually
// this is because we are using authToken from authLogIn operations
// resuming after a refreshToken we are unauthorized with old accessToken assigned to @authToken

### authLogIn
// @name authLogIn
// when login always sent new authTokens
// authToken and refreshToken (cookie)
POST {{uri}}/auth/login HTTP/1.1
Content-Type: {{contentType}}

{
  "username": "admin",
  "password": "12345678"
}

### authRefreshToken
// @name authRefreshToken
// when refresh token always sent new authTokens
// authToken and refreshToken (cookie)
// it will fail after we increase version with authRevokeRefreshToken, logout etc, 
// the version of inMemory doesn't match the version of refresh token

POST {{uri}}/auth/refresh-token HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### authRevokeRefreshToken
// @name authRevokeRefreshToken
// this will increase version, and refreshToken of the user will fail, when try to refresh a new one

POST {{uri}}/auth/revoke-refresh-token HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username":"admin"
}


### authLogOut
// @name authLogOut
// when logout always sent refreshToken (cookie) but we keep authToken in client ex and it still works until expires, but refreshToken will fail, that's not bad, auth token is short live

POST {{uri}}/auth/logout HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### userFindAll  // @HttpCode(204)

// @name userFindAll
@authToken = {{authLogIn.response.body.$.accessToken}}
@skip = 0
@take = 50
GET {{uri}}/user/{{skip}}/{{take}} HTTP/1.1
Authorization: Bearer {{authToken}}

### userFindById
// @name userFindById
@userId = {{userFindAll.response.body.$.[0].id}}
@authToken = {{authLogIn.response.body.$.accessToken}}

GET {{uri}}/user/{{userId}} HTTP/1.1
Authorization: Bearer {{authToken}}

### userCreate
// @name userCreate
@authToken = {{authLogIn.response.body.$.accessToken}}

POST {{uri}}/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "mario.monteiro",
  "password": "secret",
  "firstName": "MÃ¡rio",
  "lastName": "Monteiro",
  "email":"mario.monteiro@critical-links.com"
}

### userUpdate
// @name userUpdate
@userId = {{userFindAll.response.body.$.[0].id}}
@authToken = {{authLogIn.response.body.$.accessToken}}

PUT {{uri}}/user/{{userId}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "firstName": "Alexandre",
  "lastName": "Monteiro",
  "email":"alexandre.monteiro@critical-links.com",
  "metaData": { "key": "value"},
  "roles": [ "USER","ADMIN" ]
}

### userUpdatePassword
// @name userUpdatePassword
@authToken = {{authLogIn.response.body.$.accessToken}}
@userId = {{userFindAll.response.body.$.[0].id}}

PUT {{uri}}/user/{{userId}}/password HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "password": "87654321"
}

### userDelete
// @name userDelete
@authToken = {{authLogIn.response.body.$.accessToken}}
@userId = {{userFindAll.response.body.$.[0].id}}

DELETE {{uri}}/user/{{userId}} HTTP/1.1
Authorization: Bearer {{authToken}}

### userProfile
// @name userProfile
@authToken = {{authLogIn.response.body.$.accessToken}}

GET {{uri}}/user/profile HTTP/1.1
Authorization: Bearer {{authToken}}

### updateProfile
// @name updateProfile
@authToken = {{authLogIn.response.body.$.accessToken}}

PUT {{uri}}/user/{{userId}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "firstName": "Alexandre",
  "lastName": "Monteiro",
  "email":"alexandre.monteiro@critical-links.com"
}

### updateProfilePassword
// @name updateProfilePassword
@authToken = {{authLogIn.response.body.$.accessToken}}

PUT {{uri}}/user/{{userId}}/password HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "password": "87654321"
}